#!/usr/bin/env ruby

require 'sinatra'
require 'slim'
require 'fileutils'
require 'sinatra/base'
require 'GeneValidatorApp'
require "sinatra/config_file"
require 'thin'
#require 'genevalidator'

class GVapp < Sinatra::Base
  helpers GeneValidatorApp
  set :root, "#{File.dirname(__FILE__)}/../"
  register Sinatra::ConfigFile
  config_file "#{File.dirname(__FILE__)}/../config.yml"

  #########################
  # Remove before Release 
  # When false, it compresses the rendered HTML.
  Slim::Engine.default_options[:pretty] = true
  # A Simple Response - just here for testing purposes
  get '/response' do 
    insides = "Hello from the server"
    create_results(insides)
  end
  # A Simple Response - just here for testing purposes
  get '/time' do
    # sleep(3)
    # insides = "The time is " + Time.now.to_s
    # create_results(insides)
    fileread = IO.read("/Volumes/Yosemite OS/Users/ismailm/Genevalidator/2014-08-20_11-01-53-241-241814000_127-0-0-1/table.html")
    puts fileread.to_s
    create_results(fileread.to_s)
  end
  ###########################
  #### Start of Actual Script

  get '/' do
    slim :index
  end

  # get '/results/*'
  #   unique_name = params[:splat]
  #   working_folder   = File.join(Dir.home + '/Genevalidator/' + unique_name)

  #   if File.exist?(working_folder)
  #     results = IO.read("#{working_folder}/table.html")
  #   else
  #     results = "Sorry, no Results can be found at this URL. Please try again."
  #   end
  #   create_results(results)
  # end

  post '/input' do
    # Set up Variables 
    sequences        = params[:seq]
    validation_array = params[:validations].to_s.gsub(/[\[\]\"\,]/, '')

    unique_name      = Time.new.strftime('%Y-%m-%d_%H-%M-%S-%L-%N') + '_' + request.ip.gsub('.','-')
    working_folder   = File.join(Dir.home + '/Genevalidator/' + unique_name)

    puts ''
    puts 'Starting...'
    puts 'Ensuring Sequences are in Fasta format.'
    sequences = to_fasta(sequences)

    puts 'Creating the Working folder at ' + working_folder

    # Loops through the following if the Folder already exist until a Unique name is created that doesn't exist.
    # while File.exist?(working_folder)
    #   unique_name = Time.new.strftime('%Y-%m-%d_%H-%M-%S-%L-%N') + '_' + request.ip.gsub('.','-')
    #   working_folder   = File.join(Dir.home + '/Genevalidator/' + unique_name)
    # end
       
    # if the folder does not exist, one is created.
    unless File.exist?(working_folder)
      FileUtils.mkdir_p working_folder
    end

    puts 'Writing the input sequences into a fasta file.'
    File.open(File.join(working_folder, "input_file.fa"), 'w+') do |f|
      f.write sequences
    end

    # Run GeneValidator
     run_genevalidator(validation_array, working_folder)
    
    results = IO.read("#{working_folder}/table.html")
    
    create_results(results)
  end
end
GVapp.run!