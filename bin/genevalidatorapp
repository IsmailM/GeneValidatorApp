#!/usr/bin/env ruby

require 'sinatra'
require 'slim'
require 'thin'
require 'GeneValidatorApp'
require 'fileutils'
require 'sinatra/base'
require 'sinatra/config_file'
require 'genevalidator'
# TODO: do we still need a config file...
##      (was initially put in to stop the browser timing out.)

# AnuragPriyam:
# * check the manner in which temp files are stored and served.

# The Actual App...
class GVapp < Sinatra::Base
  helpers GeneValidatorApp
  set :root, "#{File.dirname(__FILE__)}/../"
  register Sinatra::ConfigFile
  config_file "#{File.dirname(__FILE__)}/../config.yml"

  before do
    puts "\nStarting..."
    @tempdir       = settings.tempdir
    @unique_name   = create_unique_name
    @working_dir   = File.join(@tempdir, @unique_name)
    if File.exist?(@working_dir)
      @unique_name = ensure_unique_name(@working_dir, @tempdir)
    end
    
    @public_dir    = File.join("#{File.dirname(__FILE__)}", '..', 'public',
                               'GeneValidator', @unique_name)

    # Set up dbs...
    @non_default_dbs = settings.non_default
    @default_db      = settings.default_db

    if File.exist?(@working_dir)
      halt 400, 'A unique name cannot be created for this session.'
    end
    unless File.exist?(@tempdir)
      halt 400, 'The Temporary folder cannot be found.'
    end
  end

  get '/' do
    slim :index
  end

  post '/input' do
    sequences   = params[:seq]
    validations = params[:validations].to_s.gsub(/[\[\]\"]/, '')
    db          = params[:database]

    FileUtils.mkdir_p @working_dir
    FileUtils.ln_s "#{@working_dir}", "#{@public_dir}"
    sequences = to_fasta(sequences)
    create_fasta_file(@working_dir, sequences)
    run_genevalidator(validations, db, @working_dir, @unique_name)
  end
end

# Do Validations here = So only run once after installation
#  Check that GV exists in path
#  Check by either:
    # -> Creating a small enough test unit and run Genevalidator in a subshell.
    # -> require GeneValidator and initilise the init (which checks if everything works perfectly...)

db_root   =  File.join(Dir.home, 'blastdb') # ARGV[0]
### Possibly take the name of the default DB as a second argument. 


### Sort out the DBs...
default_db = {}
dbs = scan_blast_database_directory(db_root)
default_db_name = choose_default(dbs)
# Create a separate Hash for the the default and everything else...
default_db[default_db_name] = dbs[default_db_name]
dbs.delete(default_db_name)


GVapp.set :non_default, dbs
GVapp.set :default_db, default_db
GVapp.set :tempdir, Dir.mktmpdir('GeneValidator_')
GVapp.run!
