#!/usr/bin/env ruby
require 'optparse'
require 'GeneValidatorApp'
require 'GeneValidatorApp/PreRunValidation.rb'
require 'sinatra'
require 'slim'
require 'sinatra/base'
require 'sinatra/config_file'

# AnuragPriyam:
# * check the manner in which temp files are stored and served.

opt = {}
optparse = OptionParser.new do |opts|
  opts.banner = <<Banner

* Usage: genevalidatorapp [options]

* Available Options

Banner

  opts.on('-p', '--port PORT', 'Port to run GeneValidatprApp on') do |port|
    options['port'] = port
  end

  opts.on('-c', '--config CONFIG_FILE', 'Use the given configuration file') do |config_file|
    options['config_file'] = config_file
  end

  opt[:verbose] = false
  opts.on('-v', '--verbose', 'Provides more information on each step taken in',
          ' this program') do
    opt[:verbose] = true
  end

  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end

  opts.on('--version', 'Shows version') do
    puts GeneValidatorApp.VERSION
    exit
  end
end
optparse.parse!


# Puts these options in a config file...
db_root = File.join(Dir.home, 'blastdb')
# Default DB
tempdir = Dir.mktmpdir('GeneValidator_')


# The Actual App...
class GVapp < Sinatra::Base
  helpers GeneValidatorAppHelper
  set :root, "#{File.dirname(__FILE__)}/../"
  register Sinatra::ConfigFile
  config_file "#{File.dirname(__FILE__)}/../config.yml"

    # Remove before Release When false, it compresses the rendered HTML.
  Slim::Engine.default_options[:pretty] = true

  before do
    @root_dir        = settings.root_dir
    @tempdir         = settings.tempdir

    @default_db      = settings.default_db
    @non_default_dbs = settings.non_default
    @dbs             = settings.dbs

    @unique_name     = create_unique_name
    @working_dir     = File.join(@tempdir, @unique_name)
    if File.exist?(@working_dir)
      @unique_name   = ensure_unique_name(@working_dir, @tempdir)
    end
    @public_dir      = File.join(@root_dir, '..', 'public', 'GeneValidator', @unique_name)

    if File.exist?(@working_dir)
      halt 400, 'A unique name cannot be created for this session.'
    end
    unless File.exist?(@tempdir)
      halt 400, 'The Temporary folder cannot be found.'
    end
  end

  get '/' do
    slim :index
  end

  post '/input' do
    seqs    = params[:seq]
    vals    = params[:validations].to_s.gsub(/[\[\]\"]/, '')
    db_name = params[:database]
    db      = @dbs[db_name][0][:path]

    FileUtils.mkdir_p @working_dir
    FileUtils.ln_s "#{@working_dir}", "#{@public_dir}"
    seqs = to_fasta(seqs)
    create_fasta_file(@working_dir, seqs)
    run_genevalidator(vals, db, @working_dir, @unique_name)
  end
end


dbs = GeneValidatorApp::Prerun.prerun(db_root,tempdir)

GVapp.set :root_dir, "#{File.dirname(__FILE__)}"
GVapp.set :dbs, dbs[:dbs]
GVapp.set :non_default, dbs[:non_default_dbs]
GVapp.set :default_db, dbs[:default_db]
GVapp.set :tempdir, tempdir
GVapp.run!




