#!/usr/bin/env ruby

require 'sinatra'
require 'slim'
require 'fileutils'
require 'sinatra/base'
require 'GeneValidatorApp'
require "sinatra/config_file"
require 'thin'
#require 'genevalidator'

class GVapp < Sinatra::Base
  helpers GeneValidatorApp

  set :root, "#{File.dirname(__FILE__)}/../"
  register Sinatra::ConfigFile
  config_file "#{File.dirname(__FILE__)}/../config.yml"
  # Remove before Release When false, it compresses the rendered HTML.
  Slim::Engine.default_options[:pretty] = true

  get '/' do
    slim :index
  end

  post '/input' do
    # Set up Variables 
    sequences        = params[:seq]
    validation_array = params[:validations].to_s.gsub(/[\[\]\"\,]/, '')

    unique_name      = create_unique_name
    working_folder   = File.join(Dir.home, '/Genevalidator', unique_name)
    public_folder    = File.join("#{File.dirname(__FILE__)}", '/../public/Genevalidator', unique_name)

    sequences = to_fasta(sequences)
    
    ensure_unique_name(public_folder)

    FileUtils.mkdir_p working_folder unless File.exist?(working_folder)
    FileUtils.mkdir_p public_folder unless File.exist?(public_folder)
  
    create_fasta_file(working_folder, sequences)

    # Run GeneValidator
    run_genevalidator(validation_array, working_folder, public_folder, unique_name)
    
    # TODO:Remove the Working folder (We have a copy of everything useful in the public folder)

    read_table(public_folder)
    create_results(results)
  end

  get '/results/*' do
    unique_name      = params[:splat]
    public_folder    = File.join("#{File.dirname(__FILE__)}", '/../public/Genevalidator', unique_name)
    
    if File.exist?(public_folder)
      results = IO.read("#{public_folder}/table.html")
    else
      results = "Sorry, no results can be found at this URL. Please try again."
    end
    
    create_results(results)
  end

end

GVapp.run!