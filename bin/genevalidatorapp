#!/usr/bin/env ruby
require 'optparse'
require 'GeneValidatorApp'
require 'GeneValidatorApp/PreRunValidation.rb'
require 'GeneValidatorApp/version'

require 'sinatra'
require 'pathname'

opt = {}
optparse = OptionParser.new do |opts|
  opts.banner = <<Banner

* Usage: genevalidatorapp [options]

* Available Options

Banner

  opt[:config_file] = Pathname.new(Dir.home) + '.genevalidatorapp.conf'
  opts.on('-c', '--config CONFIG_FILE', 'The Path to the configuration file',
          'By default, GeneValidatorapp searches the home directory,',
          '("~/genevalidatorapp.conf") for the configuration file.') do |config_file|
    opt[:config_file] = config_file
  end

  opt[:debug] = false
  opts.on('-d', '--debug', 'Provides more information on each step taken in',
          ' this program (which can also help for debugging)') do
    opt[:debug] = true
  end

  opt[:port] = 4567
  opts.on('-p', '--port PORT', 'The port at whihc to run the app.') do |port|
    opt[:port] = port
  end

  opt[:num_threads] = 1
  opts.on('-n', '--num_threads num_of_threads', Integer, 'Run the resource heavy BLAST (&',
          ' Mafft) with more than one thread.') do |num_threads|
    opt[:num_threads] = num_threads
  end

  opts.on('-v', '--version', 'Shows version') do
    puts GeneValidatorApp::VERSION
    exit
  end

  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end
end
optparse.parse!

# SET UP & START APP...

# tempdir = Pathname.new(Dir.mktmpdir('GeneValidator_'))
# root    = Pathname.new(__FILE__).dirname.parent
# vars    = GeneValidatorApp::Prerun.validate(opt[:debug], opt[:config_file],
#                                             tempdir, root, opt[:num_threads])

# GVapp.set :environment, :production
# GVapp.set :root, Pathname.new(__FILE__).dirname.parent
# GVapp.set :public_folder, vars[:web_dir]
# GVapp.set :tempdir, tempdir

# GVapp.set :port, opt[:port].to_i
# GVapp.set :num_threads, opt[:num_threads]
# GVapp.set :mafft_path, vars[:mafft_path]
# GVapp.set :blast_path, vars[:blast_path]
# GVapp.set :maxCharacters, vars[:maxChars]
# GVapp.set :GVversion, GeneValidatorApp::Prerun.current_gv_version

# GVapp.set :dbs, vars[:dbs]
# GVapp.set :non_default, vars[:rest_dbs]
# GVapp.set :default_db, vars[:default_db]

# GVapp.run!


GeneValidatorApp.init(opt)
GeneValidatorApp.run
