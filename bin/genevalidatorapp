#!/usr/bin/env ruby
require 'slop'

ENV['RACK_ENV'] ||= 'production'

# display name for tools like `ps`
$PROGRAM_NAME = 'genevalidatorapp'

BANNER = <<BNR
SUMMARY

GeneValidator - Identify problems with predicted genes

USAGE

genevalidatorapp [options]

Example

  # Launch GeneValidatorApp with the given config file
  $ genevalidatorapp --config ~/.genevalidatorapp.conf

  # Launch GeneValidatorApp with 8 threads at port 8888
  $ genevalidatorapp --num_threads 8 --port 8888

  # Create a config file with the other arguments
  $ genevalidatorapp -s -d ~/database_dir
BNR

opts = Slop.parse do |o|
  # o.banner 'sddssdsdsdsdsdds'

  o.separator 'Compulsory Argument, unless set in a config file'

  o.string '-d', '--database_dir',
           'Read BLAST database from this directory'

  o.separator ''
  o.separator 'Optional Arguments'

  o.string '-f', '--default_db',
           'The Path to the the default database'

  o.string '-n', '--num_threads',
           'Number of threads to use to run a BLAST search'

  o.string '-c', '--config_file',
           'Use the given configuration file'

  o.string '-r', '--require'
           'Load extension from this file'

  o.string '--host',
           'Host to run GeneValidatorApp on'
  
  o.string '-p', '--port'
           'Port to run GeneValidatorApp on'
  
  o.string '-s', '--set',
           'Set configuration value in the config file'
  
  o.string '-l', '--list_dbs',
           'List BLAST databases'
  
  o.string '-b', '--blast_bin',
           'Load BLAST+ binaries from this directory'
  
  o.string '-m', '--mafft_bin',
           'Load Mafft binaries from this directory'
  
  o.bool   '-D', '--devel'
           'Start GeneValidatorApp in development mode'
           
  o.bool   '-v', '--version',
           'Print version number of GeneValidatorApp that will be loaded'
  
end

if opts.version?
  require 'GeneValidatorApp/version'
  puts GeneValidatorApp::VERSION
  exit
end

ENV['RACK_ENV'] = 'development' if opts.devel?

require 'GeneValidatorApp'
begin
  o = opts.to_hash.delete_if { |_k, v| k == :set || k == :version || v.nil? }
  GeneValidatorApp.init(o)
rescue SystemExit => e

  puts '*** Error: GeneValidator failed to initialise properly.'
  puts '    Please check all paramaters and try again.'
  puts '    See https://github.com/IsmailM/GeneValidatorApp for more help'
  exit e.status
end

if opts.list_databases?
  puts GeneValidatorApp::Database.all?
end

if opts.set?
  GeneValidatorApp.send :write_config_file
end

# if fetch_option(:set).value
#   GeneValidatorApp.send :write_config_file
# end

GeneValidatorApp.run
