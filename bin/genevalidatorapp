#!/usr/bin/env ruby

require 'sinatra'
require 'slim'
require 'thin'
require 'GeneValidatorApp'
require 'fileutils'
require 'sinatra/base'
require "sinatra/config_file" 
# TODO: do we still need a config file... (was initally put in to stop the browser timing out.)


# AnuragPriyam: 
# * check the manner in which temp files are stored and served. 


class GVapp < Sinatra::Base
  helpers GeneValidatorApp

  set :root, "#{File.dirname(__FILE__)}/../"
  register Sinatra::ConfigFile
  enable :sessions
  config_file "#{File.dirname(__FILE__)}/../config.yml"
  # Remove before Release When false, it compresses the rendered HTML.
  Slim::Engine.default_options[:pretty] = true

  before do
    puts "\nStarting..."
    @tempdir          = settings.tempdir
    @unique_name      = create_unique_name
    @working_folder   = File.join(@tempdir, @unique_name)
    @unique_name      = ensure_unique_name(@working_folder, @tempdir) if File.exist?(@working_folder)
    @public_folder    = File.join("#{File.dirname(__FILE__)}", '..', 'public', 'GeneValidator', @unique_name)

    # Set the default class of the adv params btn 
    if session[:adv_params] == 'adv_user'
      @adv_params_btn_class = "collapse in"
      @btn_text = "Hide Advanced Parameters"
    else
      @adv_params_btn_class = "collapse"
      @btn_text = "Show Advanced Parameters"
    end

    # Do Validations 
    #  check that GV exists in path 
    #  check that can write to tempdir
    #  check that db exists?
    raise IOError, 'A unique name cannot be created for this session.' if File.exist?(@working_folder)
  end

  get '/' do
    slim :index
  end

  post '/input' do
    # Set up Variables 
    sequences        = params[:seq]
    validation_array = params[:validations].to_s.gsub(/[\[\]\"]/, '')
    database         = params[:database]

    case database
      when 'sp'
        db = settings.swissprot
      when 'up'
        db = settings.uniprot
      when 'nr'
        db = settings.nr
    end

    if (validation_array != 'lenc, lenr, dup, merge, align, frame, orf') || (database != 'sp')
      session[:adv_params] = 'adv_user'
    end
    puts "@adv_params_btn_class = #{@adv_params_btn_class}"
    puts "session[:adv_params] = #{session[:adv_params]}"

    # Create the working folder (within the temp folder). and then creating
    #   a soft link in the public folder to the working folder.
    FileUtils.mkdir_p @working_folder
    FileUtils.ln_s "#{@working_folder}", "#{@public_folder}"
    # Ensuring seqs are in fasta format and then writing them to file.
    sequences = to_fasta(sequences)
    create_fasta_file(@working_folder, sequences)
    results = run_genevalidator(validation_array, db, @working_folder, @public_folder, @unique_name)

    create_results(results)
  end

  # TODO: Get the below to work...
  # get '/results/*' do
  #   @existing_unique_name      = params[:splat]
  #   @existing_public_folder    = File.join("#{File.dirname(__FILE__)}", '/../public/GeneValidator', @existing_unique_name)

  #   if File.exist?(@existing_public_folder)
  #     @results = IO.read("#{@existing_public_folder}/table.html")
  #   else
  #     @results = "Sorry, no results can be found at this URL. Please try again."
  #   end

  #   slim :index
  # end

   
end


# Use this to supply the names of dbs to the app...
swissprot_db_name = 'sp'
uniprot_db_name = 'up'
nr_db_name = 'nr'

GVapp.set :swissprot, swissprot_db_name
GVapp.set :uniprot, uniprot_db_name
GVapp.set :nr, nr_db_name

GVapp.set :tempdir, Dir.mktmpdir('GeneValidator_')
GVapp.run!

